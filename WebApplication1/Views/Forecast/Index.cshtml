
@using WebApplication1.Models
@using System.Collections.Generic
@model  Jobs
@using System.Web.Script.Serialization
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json




<html>
<head>
    @Styles.Render("~/Content/Site.css")
    @Styles.Render("~/Content/loading.css")
    @Styles.Render("~/Content/hover.css")

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">

    @Styles.Render("~/Styles/Home.css")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>


    <style>
        table.dataTable td {
            word-break: break-word;
        }
        .badge-pill {
            margin: 5px;
            font-size: 15px;
            background-color: #15a9df;
        }
        .badges, .badges:hover {
            color: white !important;
            cursor: text !important;
            font-family: Raleway;
            font-weight: 100;
       
        }

  
    </style>


    <script>
        var ServerData = "Empty";
        var table = null;
        var AllEverySingleCheckBox = [];
        var AllEverySingleCheckBoxForSelectAll = [];
        var UserViewTable = null;
        $(document).ready(function () {
            $("#LoadingImage").hide();
            mainfunction()
            toggle()
       
        });

        function toggle() {
            $('.btn-toggle').click(function () {
                $(this).find('.btn').toggleClass('active');
                if ($(this).find('.btn-outline-info').length > 0) {
                    if ($(this).find('.btn').toggleClass('btn-outline-info'))
                        $('.heading').text(function (i, v) {
                            return v === 'Infill Forecast Report' ? 'Swing Door/ Awning Forecast Report' : 'Infill Forecast Report'
                        })
                }

            });
        }

        //main function of the program
        async function mainfunction() {
            ServerData = $("#customInput").data("value");       
           
            var temp = [];
            ServerData.allofthejobtables_.forEach(elm => {
               
                elm.jobdetail_.forEach(elm2 => {
                    
                    temp.push({job:elm.jobname_,floor:elm2.floor,tag:elm2.tag,style:elm2.style})
                    
                })
            })
            ServerData = temp;
            drawTable(ServerData)
            
        }


        //doing the ajax
        async function doAjax(input) {
            $("#LoadingImage").show();
            

            $.ajax({
                async: "true",
                type: "POST",
                url: "/Forecast/RcvJobs",
                data: JSON.stringify({ jobquery: input , stylesWeLookFor: "this", reportname: "and this " }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
           
                success: function (response) {
                    $("#LoadingImage").hide();

                    console.log("ajax responded! ", response)           


                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });

           
        }

        //inside the RcvedJobs we have job floor and tags but for showing them to user we have to group them just by job  ==> not floor not tag
        function getUniqDataForJob(input) {
            var input_ = input;
            var input_ = JSON.parse(JSON.stringify(ServerData))
            var output = [];

            input_.forEach(elm => {
                var flag = true;
                output.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        flag = false;
                    }
                })
                if (flag) {
                    output.push(elm);
                }
            })
            return output;
        }

        function getUniqDataForAllJobFloor(input) {
            var input_ = input
            var input_ = JSON.parse(JSON.stringify(input))
            var output = [];

            input_.forEach(elm => {
                var flag = true;
                output.forEach(elm2 => {
                    if (elm.job == elm2.job && elm.floor == elm2.floor) {
                        flag = false;
                    }
                })
                if (flag) {
                    output.push({ job: elm.job, floor: elm.floor, checked: "" });
                }
            })

            function compare(in1, in2) {
                if (in1.floor.toUpperCase() > in2.floor.toUpperCase()) return 1;
                if (in1.floor.toUpperCase() < in2.floor.toUpperCase()) return -1;
                               
            }
            output.sort(compare);

            
            return output;
        }

        function getUniqDataForAllJobs(input) {
            var input_ = input
            var input_ = JSON.parse(JSON.stringify(input))
            var output = [];

            input_.forEach(elm => {
                var flag = true;
                output.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        flag = false;
                    }
                })
                if (flag) {
                    output.push({job: elm.job, checked: "" });
                }
            })
            return output;
        }

        function drawTable(input) {

            AllEverySingleCheckBox = getUniqDataForAllJobFloor(input)
            AllEverySingleCheckBoxForSelectAll = getUniqDataForAllJobs(input)
            

            //console.log(prepedReturnArr)

            $('#GlazingReport').DataTable({
                "destroy": true,
                select: "single",
                "searching": false,
                "paging": false,
                "info": false,
                "scrollY": "645px",
                "scrollCollapse": true,
                "columns": [
                    {
                        "className": 'details-control',
                        "orderable": false,
                        "data": null,
                        "defaultContent": '',
                    },
                    { "data": "job" },
                ],
                "columnDefs": [
                    { width: 100, targets: 0 }
                ],
                "order": [[1, 'asc']]
            });
            $('#GlazingReport').DataTable().draw();

            //click on data tabel row
            $('#GlazingReport tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var tdi = tr.find("i.fa");
                var row = $('#GlazingReport').DataTable().row(tr);

                

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                    tdi.first().removeClass('fa-minus-square');
                    tdi.first().addClass('fa-plus-square');
                }
                else {
                    // Open this row
                    row.child(format(row.data())).show();
                    tr.addClass('shown');
                    tdi.first().removeClass('fa-plus-square');
                    tdi.first().addClass('fa-minus-square');
                }
            });

            $('#GlazingReport').DataTable().clear();
            $('#GlazingReport').DataTable().rows.add(getUniqDataForJob(input)).draw();

        }

        //click on green plus on each rows in tabel trigers this function
        function format(d) {
            var Internall = [];
            var temp;
            AllEverySingleCheckBoxForSelectAll.forEach(elm => {
                if (elm.job == d.job) {                    
                    temp = '<table style="border: 2px solid lightgray;" class="table table-hover nowrap innerTable" ><thead class="table-info" style="text-align: center;"><tr><th>Floors</th><th><div class="custom-control custom-checkbox custom-control-inline"><input   onclick="selectall(this)"   value="' + d.job + '" type="checkbox" class="custom-control-input" id="' + d.job + '"  ' + elm.checked + '><label class="custom-control-label" for="' + d.job + '" >Select all</label></div></th></tr></thead> <tbody>';
                }
            })
            //`d` is the original data object for the row
            //var temp = '<table style="border: 2px solid lightgray;" class="table table-hover nowrap" ><thead class="table-info" style="text-align: center;"><tr><th>Floors</th><th><input onclick="selectall(this)"  class="checkbox" value="' + d.job + '" type="checkbox" >Select all</th></tr></thead> <tbody>	';
            
            AllEverySingleCheckBox.forEach(elm => {
                if (elm.job == d.job) {
                    temp = temp + '<tr><td style="text-align: center;" >' + elm.floor + '</td><td class="c " style="text-align: center;"><input onclick="selectsingle(this)"  class="' + elm.job + ' singleCheck" value=' + JSON.stringify(elm) + ' type="checkbox" ' + elm.checked + '></td></tr>'
                }
            })
            temp = temp + ' </tbody></table>'
            return temp
        }

        //check or uncheck the "select all" all floors for one job
        function selectall(input) {
            //changes it own property in the global variable 
            AllEverySingleCheckBoxForSelectAll.forEach(elm => {
                if (elm.job == input.value) {
                    if (input.checked == true) {
                        elm.checked = "checked";
                    }
                    if (input.checked == false) {
                        elm.checked = "";
                    }
                }
            })
            //changes all the chech boxes for floors on that job to checked or uncheked 
            for (item of document.getElementsByClassName(input.value)) {
                if (input.checked == true) {
                    item.checked = true;
                }
                if (input.checked == false) {
                    item.checked = false;
                }
            }

            //changing the status of the global variable AllEverySingleCheckBox 
            AllEverySingleCheckBox.forEach(elm => {
                if (elm.job == input.value) {
                    if (input.checked == true) {
                        elm.checked = "checked";
                    }
                    if (input.checked == false) {
                        elm.checked = "";
                    }
                }
            })

            updateUserView();
        }

        //if user clicks on every single floor it loops throw prepedReturnArr and changes the status of the checked property
        function selectsingle(input) {
            
            var temp = JSON.parse(input.value);

            //change the status for that single item AllEverySingleCheckBox 
            AllEverySingleCheckBox.forEach(elm => {
                if (elm.job == temp.job && elm.floor == temp.floor) {
                    if (input.checked == false) {
                        elm.checked = "";
                    }
                    if (input.checked == true) {
                        elm.checked = "checked"
                    }
                }
            })

            //checking to see if there is need to change the status of the select all checkbox

            //when user unchecks one box we have to make sure select all is uncheked
            if (input.checked == false) {                
                var selectallcheckbox =  document.getElementById(temp.job)
                //if is extra condition check when user uncheks something for sure we have to uncheck select all
                if (selectallcheckbox.checked) {
                    selectallcheckbox.checked = false                    
                }
                //chanding the status of that select all check box in the global variable
                AllEverySingleCheckBoxForSelectAll.forEach(elm => {
                    if (elm.job == selectallcheckbox.value) {
                        elm.checked = "";
                    }
                })
            }

         
            //when user chekces select box if all the others are selected we have to check select all
            if (input.checked == true) {
                var flag = true

                //looping through other boxes in that class if all of them are checked checks the select all aswell
                for (item of document.getElementsByClassName(temp.job)) {
                    if (!item.checked) {
                        flag = false
                    }
                    
                }

                //flag will be true if all of the other boxes are true then it checks the select all aswell
                if (flag) {
                    var selectallcheckbox = document.getElementById(temp.job)
                    selectallcheckbox.checked = true
                    //chanding the status of that select all check box in the global variable
                    AllEverySingleCheckBoxForSelectAll.forEach(elm => {
                        if (elm.job == selectallcheckbox.value) {
                            elm.checked = "checked";
                        }
                    })


                }
                
            }   

            updateUserView();
        }

        //this function shows selected job(floorssss,)
        function updateUserView() {            
            var selectedJobFloorsToShow = [];
            var groupedByJob = [];

            AllEverySingleCheckBox.forEach(elm => {
                if (elm.checked == "checked") {
                    selectedJobFloorsToShow.push(elm)
                }                
            })
            
            selectedJobFloorsToShow.forEach(elm => {
                var flag = true;

                groupedByJob.forEach(elm2 => {
                    if (elm.job == elm2.job) {flag=false}
                })

                if (flag) { groupedByJob.push({job:elm.job,floors:""})}
            })


            var i = 0;
            
            groupedByJob.forEach(elm => {
                var coutOfSelectedFloors = 0;
                selectedJobFloorsToShow.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        coutOfSelectedFloors++;
                        i++;
                        if (i == 5) {
                            i = 0;
                           // elm.floors = elm2.floor + ",<br>" + elm.floors
                            elm.floors = " <a class='badge badges badge-pill badge-info'>" + elm2.floor + "</a>" + "<br>" +" <a class='badge badges badge-pill badge-info'>" + elm.floors + "</a>" 

                        }
                        //elm.floors = elm2.floor + " " + elm.floors
                        elm.floors = " <a class='badge badges badge-pill badge-info'>" + elm2.floor +  elm.floors+"</a>" 
                    }
                })
                //elm.job = elm.job + "(" + coutOfSelectedFloors + ")"
                elm.job = elm.job +" <span class='badge badges badge-pill badge-info'> "+ coutOfSelectedFloors +"</span>"

            })

            
            $('#SelectedGlazingReport').DataTable({
                "responsive": true,
                "destroy": true,
                "data": groupedByJob,
                "searching": false,
                "paging": false,
                "info": false,
                //"scrollY": "645px",
               // "scrollCollapse": true,
                "columns": [
                  
                    { "data": "job" },
                    { "data": "floors" }

                ],
                
                "order": [[0, 'asc']]
            });

            $('#SelectedGlazingReport').DataTable().draw();

        }

        //to prepare and send the data to bach end
        async function search() {
            //deep copy of the global variable AllEverySingleCheckBox to make sure nothing won't be changed
            var input_ = JSON.parse(JSON.stringify(AllEverySingleCheckBox))
            var out = [];
            input_ = input_.filter(elm => { return elm.checked != "" });

                    
                      
            input_.forEach(elm => {

                ServerData.forEach(elm2 => {
                    if (elm.job == elm2.job && elm.floor == elm2.floor) {
                        out.push(elm2);
                    }
             
                })
            })
            
            //prepare model to send backend starts here

            var out2 = []

            //add unique jobs in array
            //out2 contains all of the unique jobs
            out.forEach(elm => {
                var flag = true

                out2.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        flag = false; 
                    }                     
                })

                if (flag) {
                    out2.push({ job: elm.job})
                }
            })

            //saving detail in model for every job
            //out2 containes the unique jobs from the user selected
            
            var out3 = []
            out2.forEach(elm => {
                var detail = []
                out.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        detail.push({floor: elm2.floor, tag: elm2.tag, style: elm2.style})
                    }
                })
                out3.push({ jobname_: elm.job, jobdetail_: detail })
            })
            
            var out4 = { allofthejobtables_:out3}

            //var test = doAjax(JSON.stringify(out4))
           
        }

    </script>

    <style>
        body {
            font-family: Raleway;
        }

        label {
            font-weight: 10 !important;
            font-size: 16px;
            text-transform: none;
            font-family: Raleway;
            margin-bottom: 0rem;
            letter-spacing: 0px;
        }


        .btn-outline-info:hover {
            background-color: transparent;
            color: #000;
            border-color: #15a9df;
        }

        .btn-outline-info {
            color: #000;
            background-color: #15a9df;
            border-color: #15a9df;
        }

        .table-info,
        .table-info > td,
        .table-info > th {
            background-color: #15a9df;
        }

        .toolbar {
            padding: 20px;
            border: solid 2px lightgray;
            border-radius: 0px;
        }




        span {
            font-weight: 10 !important;
            font-family: Raleway;
        }

        .input-group > .form-control:focus {
            outline: none !important;
            border-color: #15a9df;
            box-shadow: 0 0 10px #15a9df;
        }

        h2,
        th {
            text-transform: none;
            font-family: Raleway;
        }

        .custom-control-input:checked ~ .custom-control-label::before {
            background-color: #15a9df;
        }


        /*
        td.details-control {
           background: url('https://datatables.net/examples/resources/details_open.png') no-repeat center center;

            cursor: pointer;
        }*/



        td.details-control:after {
            content: "\f055"; /* this is your text. You can also use UTF-8 character codes as I do here */
            font-family: FontAwesome;
            padding-left: 10px !important;
            vertical-align: middle;
            color: green;
        }

        tr.shown td.details-control:after {
            /*background: url('https://datatables.net/examples/resources/details_close.png') no-repeat center center;*/
            content: "\f056"; /* this is your text. You can also use UTF-8 character codes as I do here */
            font-family: FontAwesome;
            padding-left: 10px !important;
            vertical-align: middle;
            cursor: pointer;
            color: red;
        }

        th, td {
            white-space: nowrap;
        }

        div.dataTables_wrapper {
            margin: 0 auto;
        }

        .checkbox {
            margin: 5px;
        }

        .innerTable {
            width: 100%;
            padding-right: 15px;
            padding-left: 15px;
        }

        table.dataTable th,
        table.dataTable td {
            white-space: nowrap;
        }
        section{
            padding:20px;
        }
    </style>

</head>
<body>
    <div class="header-banner-small"></div>
    <div>
        <nav class="navbar navbar-expand-sm">
            <a class="navbar-brand">
                <img src="~/Content/images/full-logo.png" class="App-logo"
                     alt="logo" height="40" width="147">
            </a>
            <ul class="navbar-nav">
                <li class="nav-item">

                </li>
            </ul>
        </nav>
    </div>




    <div id="pageHeader" class="container"><h2 class="heading">Forecast Status</h2></div>
    @*<div class="container toolbar">
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="awning">
                <label class="custom-control-label" for="awning">Awning</label>
            </div>
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="door">
                <label class="custom-control-label" for="door">Door</label>
            </div>
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="shift">
                <label class="custom-control-label" for="shift">Shift</label>
            </div>
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="r3">
                <label class="custom-control-label" for="r3">R3</label>
            </div>
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="spandrel">
                <label class="custom-control-label" for="spandrel">Spandrel</label>
            </div>
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="shadowbox">
                <label class="custom-control-label" for="shadowbox">Shadowbox</label>
            </div>

            <button class="btn btn-sm btn-outline-info pull-right" onclick="search()"><i class="fa fa-search"></i>&nbsp;Search</button>
        </div>*@


    <div class="container toolbar" style="display:flex;justify-content:space-around;">
        <div class="toggle-container toolbarButton">
            <div class="btn-group btn-toggle">
                <button class="btn btn-md  btn-outline-info active" id="awningDoor"> Awning & Door Forecast</button>
                <button class="btn btn-md " id="infill">Infill Forecast</button>
            </div>

        </div>
        <div class="searchButton"><button class="btn btn-md btn-outline-info pull-right" onclick="search()"><i class="fa fa-search"></i>&nbsp;Search</button></div>
    </div>

    <!--Loading Image-->
    <div id="LoadingImage" class="text-center">
        <div class="d-flex justify-content-center">
            <img class="loading ld ld-surprise" style="width:5%" src="~/Content/images/logo.jpg" />
        </div>
    </div>
    <!--END Loading Image-->
    <section class="show_tables">
    <div class="container">
        <div class="row row-no-gutters">
            <div class="col-lg-6">
                <table id="GlazingReport" class="table table-hover table-bordered " style="border: solid 2px lightgray;text-align: center; ">
                    <thead class="table-info" style="text-align: center;">
                        <tr>
                            <th class="selectall">#</th>
                            <th>Job</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="col-lg-6">
                <table id="SelectedGlazingReport" class="table table-hover table-bordered " style="border: solid 2px lightgray;text-align: center; ">
                    <thead class="table-info" style="text-align: center;">
                        <tr>
                            <th>Selected Jobs(Count)</th>
                            <th>Selected Floors</th>

                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>

            </div>
        </div>
    </div>

    </section>
    <div class="container-fluid">
         <input type="hidden" id="customInput" data-value="@JsonConvert.SerializeObject(Model)" />
    </div>

</body>

</html>













