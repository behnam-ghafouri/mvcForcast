
@using WebApplication1.Models
@using System.Collections.Generic
@model List<Job>
@using System.Web.Script.Serialization
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json




<html>
<head>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>





    <script>
        var ServerData = "Empty";
        var table = null;
        var prepedReturnArr = [];

        $(document).ready(function () {
            mainfunction()
         
            //$('#GlazingReport').DataTable().destroy();          

             
            
        });


        //main function of the program
        async function mainfunction() {

            ServerData = $("#customInput").data("value");
            drawTable(ServerData)
            console.log(ServerData)
           
        }


        //doing the ajax
        async function doAjax(input) {
            console.log(input)

            $.ajax({
                async: "true",
                type: "POST",
                url: "/Home/RcvJobs",
                data: JSON.stringify({ jobquery: input }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    console.log("ajax responded! ")
                    //ServerData = response
                    //setTimeout(() => { drawTable(ServerData) }, 1200)


                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });

            //try {
            //    result = await $.ajax({
            //        type: "POST",
            //        url: "/Home/RcvJobs",
            //        data: JSON.stringify({ jobquery: input }),
            //        contentType: "application/json; charset=utf-8",
            //        dataType: "json"
            //    })

            //    return result;
            //} catch (error) {
            //    console.log(error);
            //}
        }

        //inside the RcvedJobs we have job floor and tags but for showing them to user we have to group them just by job  ==> not floor not tag
        function getUniqDataForJob(input) {
            var input_ = input;
            var input_ = JSON.parse(JSON.stringify(ServerData))
            var output = [];

            input_.forEach(elm => {
                var flag = true;
                output.forEach(elm2 => {
                    if (elm.job == elm2.job) {
                        flag = false;
                    }
                })
                if (flag) {
                    output.push(elm);
                }
            })
            return output;
        }

        function getUniqDataForAllJobFloor(input) {
            var input_ = input
            var input_ = JSON.parse(JSON.stringify(input))
            var output = [];

            input_.forEach(elm => {
                var flag = true;
                output.forEach(elm2 => {
                    if (elm.job == elm2.job && elm.floor == elm2.floor) {
                        flag = false;
                    }
                })
                if (flag) {
                    output.push({job: elm.job, floor: elm.floor, checked: ""});
                }
            })
            return output;
        }


        function drawTable(input) {

            prepedReturnArr = getUniqDataForAllJobFloor(input)           
            //console.log(prepedReturnArr)

            $('#GlazingReport').DataTable({
                "destroy": true,
                select: "single",
                "searching": false,
                "paging": false,
                "columns": [
                    {
                        "className": 'details-control',
                        "orderable": false,
                        "data": null,
                        "defaultContent": '',
                    },
                    { "data": "job" },
                ],
                "order": [[1, 'asc']]
            });
            $('#GlazingReport').DataTable().draw();

            //click on data tabel row
            $('#GlazingReport tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var tdi = tr.find("i.fa");
                var row = $('#GlazingReport').DataTable().row(tr);

                console.log(row)

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                    tdi.first().removeClass('fa-minus-square');
                    tdi.first().addClass('fa-plus-square');
                }
                else {
                    // Open this row
                    row.child(format(row.data())).show();
                    tr.addClass('shown');
                    tdi.first().removeClass('fa-plus-square');
                    tdi.first().addClass('fa-minus-square');
                }
            });

            $('#GlazingReport').DataTable().clear();
            $('#GlazingReport').DataTable().rows.add(getUniqDataForJob(input)).draw();

        }

        //click on green plus on each rows in tabel trigers this function
        function format(d) {
            var Internall = [];     

             //`d` is the original data object for the row
            var temp = '<table style="padding: 0.5%; border: 1px solid #ccc;   border-radius: 3px;margin-left: 1%;margin-right: 1%;"><thead><tr><th>FLOORS</th><th><input onclick="selectall(this)" value="' + d.job + '"   type="checkbox"> select all</th></tr></thead> <tbody>	';

            prepedReturnArr.forEach(elm => {
                if (elm.job == d.job) {
                    temp = temp + '<tr><td>' + elm.floor + '</td><td class="c"><input onclick="selectsingle(this)"  class="' + elm.job + ' " value='+JSON.stringify(elm)+' type="checkbox" ' + elm.checked + '></td></tr>'
                }
            })
            temp = temp + ' </tbody></table>'
       
            return temp
        }

        //select or deselect all floors for one job
        function selectall(input) {

            for (item of document.getElementsByClassName(input.value)) {
                if (input.checked == true) {
                    item.checked = true;
                }
                if (input.checked == false) {
                    item.checked = false;
                }
            }


            prepedReturnArr.forEach(elm => {

                if (elm.job == input.value) {

                    if (input.checked == true) {
                        elm.checked = "checked";
                    }
                    if (input.checked == false) {
                        elm.checked = "";
                    }
                }
            })
            console.log(prepedReturnArr)
        }
        //if user clicks on every single floor it loops throw prepedReturnArr and changes the status of the checked property
        function selectsingle(input) {

            var temp = JSON.parse(input.value);

            prepedReturnArr.forEach(elm => {
                if (elm.job == temp.job && elm.floor == temp.floor) {
                    if (input.checked == false) {
                        elm.checked = "";
                    }
                    if (input.checked == true) {
                        elm.checked = "checked"
                    }
                }
            })
            console.log(prepedReturnArr)
        }

        //to prepare and send the data to bach end
        async function search() {
            var input_ = JSON.parse(JSON.stringify(prepedReturnArr))
            var out = [];
             input_=input_.filter(elm => { return elm.checked != "" });
             input_.forEach(elm => {

                ServerData.forEach(elm2 => {
                    if (elm.job == elm2.job && elm.floor == elm2.floor) {
                        out.push(elm2);
                    }
                })
             })
           var test = doAjax(JSON.stringify(out))
            
        }

    </script>

    <style>
        td.details-control {
            background: url('https://datatables.net/examples/resources/details_open.png') no-repeat center center;
            cursor: pointer;
        }

        tr.shown td.details-control {
            background: url('https://datatables.net/examples/resources/details_close.png') no-repeat center center;
        }
    </style>

</head>
<body>



    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>Swing Door
    </label>
    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>Awning
    </label>
    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>Shift
    </label>
    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>R3
    </label>
    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>Spandrel
    </label>
    <label class="checkbox-inline">
        <input id="Line1" type="checkbox" style="color:black; font:Arial" value="1111" checked>Shadowbox
    </label>

    <div>

        <table id="GlazingReport" class="cell-border compact stripe">
            <thead>
                <tr style="background-color: #CCCCCC;border: solid 1px #555555;">
                    <th></th>
                    <th>job</th>

                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <button onclick="search()">Search</button>
    <input type="hidden" id="customInput" data-value="@JsonConvert.SerializeObject(Model)" />
</body>

</html>













